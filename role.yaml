
# pod-access-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: roboshop
  name: pod-access-trainee
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]


---

#apiVersion: rbac.authorization.k8s.io/v1
#kind: Role
#metadata:
#  namespace: roboshop
#  name: pod-access-trainee
#rules:
#- apiGroups: [""]
#  resources: ["pods"]
#  verbs: ["get", "list", "watch"]
##deployment
#rules:
#- apiGroups: ["apps"]
#  #
#  # at the HTTP level, the name of the resource for accessing Deployment
#  # objects is "deployments"
#  resources: ["deployments"]
#  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]


---
# pod-access-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata: 
  name: pod-access-trainee
  namespace: roboshop
subjects:
- kind: User
  name: jaggu
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: pod-access-trainee
  apiGroup: rbac.authorization.k8s.io



#apiVersion: rbac.authorization.k8s.io/v1
## This role binding allows "jane" to read pods in the "default" namespace.
## You need to already have a Role named "pod-reader" in that namespace.
#kind: RoleBinding
#metadata:
#  name: roboshop-trainee-king
#  namespace: roboshop1
#subjects:
## You can specify more than one "subject"
#- kind: User
#  name: nareshkumar # "name" is case sensitive
#  apiGroup: rbac.authorization.k8s.io
#roleRef:
#  # "roleRef" specifies the binding to a Role / ClusterRole
#  kind: Role #this must be Role or ClusterRole
#  name: roboshop-trainee-king  # this must match the name of the Role or ClusterRole you wish to bind to
#  apiGroup: rbac.authorization.k8s.io
#
#
#---

